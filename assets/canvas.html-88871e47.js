import{_ as c}from"./plugin-vue_export-helper-c27b6911.js";import{r as l,o as p,c as u,a as i,e as t,w as e,f as o,b as n,d as s}from"./app-af427ef1.js";const k={},r=o(`<div class="hint-container tip"><p class="hint-container-title">提示</p><p>学习canvas可以打开Axure画图软件，以便更容易理解canvas的坐标系统。不用计算，坐标一目了然。</p></div><h2 id="基本的画布功能" tabindex="-1"><a class="header-anchor" href="#基本的画布功能" aria-hidden="true">#</a> 基本的画布功能</h2><p>创建<code>&lt;canvas&gt;</code>元素时至少要设置其width和height属性，这样才能告诉浏览器在多大面积绘图。出现在开始和结束标签之间的内容是后备数据，会在浏览器不支持<code>&lt;canvas&gt;</code>元素时显示。比如：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>drawing<span class="token punctuation">&quot;</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>200<span class="token punctuation">&quot;</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>200<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>A drawing of something.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">&gt;</span></span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>要在画布上绘制图形，首先要取得绘图上下文。使用 getContext()方法可以获取对绘图上下文的引用。对于平面图形，需要给这个方法传入参数&quot;2d&quot;，表示要获取 2D 上下文对象：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> drawing <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;drawing&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 确保浏览器支持&lt;canvas&gt;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>drawing<span class="token punctuation">.</span>getContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token keyword">let</span> context <span class="token operator">=</span> drawing<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">&quot;2d&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token comment">// 其他代码</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="todataurl" tabindex="-1"><a class="header-anchor" href="#todataurl" aria-hidden="true">#</a> toDataURL()</h2><p>以使用 toDataURL()方法导出<code>&lt;canvas&gt;</code>元素上的图像。<br> 这个方法接收一个参数：要生成图像的 MIME 类型（与用来创建图形的上下文无关）。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> drawing <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;drawing&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 确保浏览器支持&lt;canvas&gt;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>drawing<span class="token punctuation">.</span>getContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>

 <span class="token comment">// 取得图像的数据 URI</span>
 <span class="token keyword">let</span> imgURI <span class="token operator">=</span> drawing<span class="token punctuation">.</span><span class="token function">toDataURL</span><span class="token punctuation">(</span><span class="token string">&quot;image/png&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

 <span class="token comment">// 显示图片</span>
 <span class="token keyword">let</span> image <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;img&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 image<span class="token punctuation">.</span>src <span class="token operator">=</span> imgURI<span class="token punctuation">;</span>
 document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2d-绘图上下文" tabindex="-1"><a class="header-anchor" href="#_2d-绘图上下文" aria-hidden="true">#</a> 2D 绘图上下文</h2><p>2D 绘图上下文提供了绘制 2D 图形的方法，包括矩形、弧形和路径。2D 上下文的坐标原点(0, 0)在<code>&lt;canvas&gt;</code>元素的左上角。所有坐标值都相对于该点计算，因此 x 坐标向右增长，y 坐标向下增长。默认情况下，width 和 height 表示两个方向上像素的最大值。</p><h2 id="填充和描边" tabindex="-1"><a class="header-anchor" href="#填充和描边" aria-hidden="true">#</a> 填充和描边</h2><p>填充以指定样式（颜色、渐变或图像）自动填充形状，而描边只为图形边界着色。大多数 2D 上下文操作有填充和描边的变体，显示效果取决于两个属性：<br><code>fillStyle</code> 和 <code>strokeStyle</code>。</p><ul><li>两个属性可以是字符串、渐变对象或图案对象，默认值都为&quot;#000000&quot;。</li><li>可以是 CSS 支持的任意格式：名称、十六进制代码、rgb、rgba、hsl 或 hsla。</li><li>这两个属性也可以是渐变或图案。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> drawing <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;drawing&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 确保浏览器支持&lt;canvas&gt;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>drawing<span class="token punctuation">.</span>getContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token keyword">let</span> context <span class="token operator">=</span> drawing<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">&quot;2d&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 context<span class="token punctuation">.</span>strokeStyle <span class="token operator">=</span> <span class="token string">&quot;red&quot;</span><span class="token punctuation">;</span>
 context<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> <span class="token string">&quot;#0000ff&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="绘制矩形" tabindex="-1"><a class="header-anchor" href="#绘制矩形" aria-hidden="true">#</a> 绘制矩形</h2><p>与绘制矩形相关的方法有 3 个：<mark>fillRect()</mark>、==strokeRect()==和 <mark>clearRect()</mark>。</p><p>这些方法都接收 4 个参数：矩形 x 坐标、矩形 y 坐标、矩形宽度和矩形高度。这几个参数的单位都是像素。</p><p>fillRect()方法用于以指定颜色在画布上绘制并填充矩形。填充的颜色使用 fillStyle 属性指定。见下例：</p>`,19),d=n("div",{class:"language-html line-numbers-mode","data-ext":"html"},[n("pre",{class:"language-html"},[n("code",null,[n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("canvas")]),s(),n("span",{class:"token attr-name"},"id"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("drawing"),n("span",{class:"token punctuation"},'"')]),s(),n("span",{class:"token attr-name"},"width"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("400"),n("span",{class:"token punctuation"},'"')]),s(),n("span",{class:"token attr-name"},"height"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("200"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("canvas")]),n("span",{class:"token punctuation"},">")]),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),m=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"let"),s(" drawing "),n("span",{class:"token operator"},"="),s(" document"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getElementById"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"drawing"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token comment"},"// 确保浏览器支持<canvas>"),s(`
`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("drawing"),n("span",{class:"token punctuation"},"."),s("getContext"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token keyword"},"let"),s(" context "),n("span",{class:"token operator"},"="),s(" drawing"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getContext"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"2d"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

  `),n("span",{class:"token comment"},"// 绘制红色矩形"),s(`
  context`),n("span",{class:"token punctuation"},"."),s("fillStyle "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"#ff0000"'),n("span",{class:"token punctuation"},";"),s(`
  context`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"fillRect"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"10"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"10"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"50"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"50"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token comment"},"// 绘制半透明蓝色矩形"),s(`
  context`),n("span",{class:"token punctuation"},"."),s("fillStyle "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"rgba(0,0,255,0.5)"'),n("span",{class:"token punctuation"},";"),s(`
  context`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"fillRect"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"30"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"30"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"50"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"50"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),v=n("p",null,"strokeRect()方法使用通过 strokeStyle 属性指定的颜色绘制矩形轮廓。下面是一个例子：",-1),g=n("div",{class:"language-html line-numbers-mode","data-ext":"html"},[n("pre",{class:"language-html"},[n("code",null,[n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("canvas")]),s(),n("span",{class:"token attr-name"},"id"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("drawing"),n("span",{class:"token punctuation"},'"')]),s(),n("span",{class:"token attr-name"},"width"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("400"),n("span",{class:"token punctuation"},'"')]),s(),n("span",{class:"token attr-name"},"height"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("200"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("canvas")]),n("span",{class:"token punctuation"},">")]),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),b=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"let"),s(" drawing "),n("span",{class:"token operator"},"="),s(" document"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getElementById"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"drawing"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token comment"},"// 确保浏览器支持<canvas>"),s(`
`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("drawing"),n("span",{class:"token punctuation"},"."),s("getContext"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token keyword"},"let"),s(" context "),n("span",{class:"token operator"},"="),s(" drawing"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getContext"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"2d"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token comment"},"// 绘制红色轮廓的矩形"),s(`
  context`),n("span",{class:"token punctuation"},"."),s("strokeStyle "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"#ff0000"'),n("span",{class:"token punctuation"},";"),s(`
  context`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"strokeRect"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"10"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"10"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"50"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"50"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token comment"},"// 绘制半透明蓝色轮廓的矩形"),s(`
  context`),n("span",{class:"token punctuation"},"."),s("strokeStyle "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"rgba(0,0,255,0.5)"'),n("span",{class:"token punctuation"},";"),s(`
  context`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"strokeRect"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"30"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"30"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"50"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"50"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),h=n("div",{class:"hint-container warning"},[n("p",{class:"hint-container-title"},"注意"),n("p",null,'描边宽度由 lineWidth 属性控制，它可以是任意整数值。类似地，lineCap 属性控制线条端点的形状［"butt"（平头）、"round"（出圆头）或"square"（出方头）］，而 lineJoin属性控制线条交点的形状［"round"（圆转）、"bevel"（取平）或"miter"（出尖）］。')],-1),x=n("p",null,"使用 clearRect()方法可以擦除画布中某个区域。该方法用于把绘图上下文中的某个区域变透明。通过先绘制形状再擦除指定区域，可以创建出有趣的效果，比如从已有矩形中开个孔。来看下面的例子：",-1),f=n("div",{class:"language-html line-numbers-mode","data-ext":"html"},[n("pre",{class:"language-html"},[n("code",null,[n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("canvas")]),s(),n("span",{class:"token attr-name"},"id"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("drawing"),n("span",{class:"token punctuation"},'"')]),s(),n("span",{class:"token attr-name"},"width"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("400"),n("span",{class:"token punctuation"},'"')]),s(),n("span",{class:"token attr-name"},"height"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("200"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("canvas")]),n("span",{class:"token punctuation"},">")]),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),y=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"let"),s(" drawing "),n("span",{class:"token operator"},"="),s(" document"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getElementById"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"drawing"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token comment"},"// 确保浏览器支持<canvas>"),s(`
`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("drawing"),n("span",{class:"token punctuation"},"."),s("getContext"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token keyword"},"let"),s(" context "),n("span",{class:"token operator"},"="),s(" drawing"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getContext"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"2d"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token comment"},"// 绘制红色矩形"),s(`
  context`),n("span",{class:"token punctuation"},"."),s("fillStyle "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"#ff0000"'),n("span",{class:"token punctuation"},";"),s(`
  context`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"fillRect"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"10"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"10"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"50"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"50"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token comment"},"// 绘制半透明蓝色矩形"),s(`
  context`),n("span",{class:"token punctuation"},"."),s("fillStyle "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"rgba(0,0,255,0.5)"'),n("span",{class:"token punctuation"},";"),s(`
  context`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"fillRect"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"30"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"30"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"50"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"50"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token comment"},"// 在前两个矩形重叠的区域擦除一个矩形区域"),s(`
  context`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"clearRect"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"30"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"30"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"30"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"30"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),q=o('<h2 id="绘制路径" tabindex="-1"><a class="header-anchor" href="#绘制路径" aria-hidden="true">#</a> 绘制路径</h2><p>要绘制路径，必须<mark>首先调用 beginPath()方法</mark>以表示要开始绘制新路径。然后，再调用下列方法来绘制路径。</p><ul><li>arc(x, y, radius, startAngle, endAngle, counterclockwise)：以坐标(x, y)为圆心，以 radius 为半径绘制一条弧线，起始角度为 startAngle，结束角度为 endAngle（都是弧度）。最后一个参数 counterclockwise 表示是否逆时针计算起始角度和结束角度（默认为顺时针）。</li><li>arcTo(x1, y1, x2, y2, radius)：以给定半径 radius，经由(x1, y1)绘制一条从上一点到(x2, y2)的弧线。</li><li>bezierCurveTo(c1x, c1y, c2x, c2y, x, y)：以(c1x, c1y)和(c2x, c2y)为控制点，绘制一条从上一点到(x, y)的弧线（三次贝塞尔曲线）。</li><li>lineTo(x, y)：绘制一条从上一点到(x, y)的直线。</li><li>moveTo(x, y)：不绘制线条，只把绘制光标移动到(x, y)。</li><li>quadraticCurveTo(cx, cy, x, y)：以(cx, cy)为控制点，绘制一条从上一点到(x, y)的弧线（二次贝塞尔曲线）。</li><li>rect(x, y, width, height)：以给定宽度和高度在坐标点(x, y)绘制一个矩形。 <ul><li>这个方法与 strokeRect()和 fillRect()的区别在于，它创建的是一条路径，而不是独立的图形。</li></ul></li></ul><p>创建路径之后，可以使用 closePath()方法绘制一条返回起点的线。如果路径已经完成，则既可以指定 fillStyle 属性并调用 fill()方法来填充路径，也可以指定 strokeStyle 属性并调用stroke()方法来描画路径，还可以调用 clip()方法基于已有路径创建一个新剪切区域。</p><p>下面这个例子使用前面提到的方法绘制了一个不带数字的表盘：</p>',5),w=n("div",{class:"language-html line-numbers-mode","data-ext":"html"},[n("pre",{class:"language-html"},[n("code",null,[n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("canvas")]),s(),n("span",{class:"token attr-name"},"id"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("drawing"),n("span",{class:"token punctuation"},'"')]),s(),n("span",{class:"token attr-name"},"width"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("400"),n("span",{class:"token punctuation"},'"')]),s(),n("span",{class:"token attr-name"},"height"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("200"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("canvas")]),n("span",{class:"token punctuation"},">")]),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),E=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"let"),s(" drawing "),n("span",{class:"token operator"},"="),s(" document"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getElementById"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"drawing"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token comment"},"// 确保浏览器支持<canvas>"),s(`
`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("drawing"),n("span",{class:"token punctuation"},"."),s("getContext"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token keyword"},"let"),s(" context "),n("span",{class:"token operator"},"="),s(" drawing"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getContext"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"2d"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token comment"},"// 创建路径"),s(`
  context`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"beginPath"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token comment"},"// 绘制外圆"),s(`
  context`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"arc"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"100"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"100"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"99"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"2"),s(),n("span",{class:"token operator"},"*"),s(" Math"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"PI"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token boolean"},"false"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token comment"},"// 绘制内圆"),s(`
  context`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"moveTo"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"194"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"100"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
  context`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"arc"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"100"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"100"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"94"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"2"),s(),n("span",{class:"token operator"},"*"),s(" Math"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"PI"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token boolean"},"false"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token comment"},"// 绘制分针"),s(`
  context`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"moveTo"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"100"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"100"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
  context`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"lineTo"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"100"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"15"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token comment"},"// 绘制时针"),s(`
  context`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"moveTo"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"100"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"100"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
  context`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"lineTo"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"35"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"100"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token comment"},"// 描画路径"),s(`
  context`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"stroke"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),A=n("p",null,"路径是 2D 上下文的主要绘制机制，为绘制结果提供了很多控制。因为路径经常被使用，所以也有一个 isPointInPath()方法，接收 x 轴和 y 轴坐标作为参数。这个方法用于确定指定的点是否在路径上，可以在关闭路径前随时调用，比如：",-1),B=n("div",{class:"language-html line-numbers-mode","data-ext":"html"},[n("pre",{class:"language-html"},[n("code",null,[n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("canvas")]),s(),n("span",{class:"token attr-name"},"id"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("drawing"),n("span",{class:"token punctuation"},'"')]),s(),n("span",{class:"token attr-name"},"width"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("400"),n("span",{class:"token punctuation"},'"')]),s(),n("span",{class:"token attr-name"},"height"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("200"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("canvas")]),n("span",{class:"token punctuation"},">")]),s(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("p")]),s(),n("span",{class:"token attr-name"},"id"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("canvasP"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("p")]),n("span",{class:"token punctuation"},">")]),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),T=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"let"),s(" drawing "),n("span",{class:"token operator"},"="),s(" document"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getElementById"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"drawing"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"let"),s(" p "),n("span",{class:"token operator"},"="),s(" document"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getElementById"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"canvasP"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token comment"},"// 确保浏览器支持<canvas>"),s(`
`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("drawing"),n("span",{class:"token punctuation"},"."),s("getContext"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token keyword"},"let"),s(" context "),n("span",{class:"token operator"},"="),s(" drawing"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getContext"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"2d"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token comment"},"// 创建路径"),s(`
  context`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"beginPath"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
  context`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"moveTo"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"100"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"100"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
  context`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"lineTo"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"100"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"15"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

  `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("context"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"isPointInPath"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"100"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"100"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    p`),n("span",{class:"token punctuation"},"."),s("innerText "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"Point (100, 100) is in the path."'),n("span",{class:"token punctuation"},";"),s(`
    context`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"stroke"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    context`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"closePath"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token punctuation"},"{"),s(`
    p`),n("span",{class:"token punctuation"},"."),s("innerText "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"Point (100, 100) is not in the path."'),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),S=o('<h2 id="绘制文本" tabindex="-1"><a class="header-anchor" href="#绘制文本" aria-hidden="true">#</a> 绘制文本</h2><p>文本和图像混合也是常见的绘制需求，因此2D绘图上下文还提供了绘制文本的方法，即 <mark>fillText()</mark> 和 <mark>strokeText()</mark>。</p><ul><li>这两个方法都接收 4 个参数：要绘制的字符串、x 坐标、y 坐标和可选的最大像素宽度。</li><li>这两个方法最终绘制的结果都取决于以下 3 个属性： <ul><li>font：以 CSS 语法指定的字体样式、大小、字体族等，比如&quot;10px Arial&quot;。</li><li>textAlign：指定文本的对齐方式，可能的值包括&quot;start&quot;、&quot;end&quot;、&quot;left&quot;、&quot;right&quot;和&quot;center&quot;。推荐使用&quot;start&quot;和&quot;end&quot;，不使用&quot;left&quot;和&quot;right&quot;，因为前者无论在从左到右书写的语言还是从右到左书写的语言中含义都更明确。</li><li>textBaseLine ：指定文本的基线，可能的值包括 &quot;top&quot; 、 &quot;hanging&quot; 、 &quot;middle&quot; 、&quot;alphabetic&quot;、&quot;ideographic&quot;和&quot;bottom&quot;。</li></ul></li></ul><p>这些属性都有相应的默认值，因此没必要每次绘制文本时都设置它们。fillText()方法使用fillStyle 属性绘制文本，而 strokeText()方法使用 strokeStyle 属性。通常，fillText()方法是使用最多的，因为它模拟了在网页中渲染文本。</p><p>由于绘制文本很复杂，特别是想把文本绘制到特定区域的时候，因此 2D 上下文提供了用于辅助确定文本大小的 measureText()方法。</p><ul><li>这个方法接收一个参数，即要绘制的文本，然后返回一个 TextMetrics 对象。</li><li>这个返回的对象目前只有一个属性 width，不过将来应该会增加更多度量指标。</li><li>measureText()方法使用 font、textAlign 和 textBaseline 属性当前的值计算绘制指定文本后的大小。</li><li>fillText()和 strokeText()方法还有第四个参数，即文本的最大宽度。这个参数是可选的（Firefox 4 是第一个实现它的浏览器），如果调用 fillText()和 strokeText()时提供了此参数，但要绘制的字符串超出了最大宽度限制，则文本会以正确的字符高度绘制，这时字符会被水平压缩，以达到限定宽度。</li></ul><h2 id="变换" tabindex="-1"><a class="header-anchor" href="#变换" aria-hidden="true">#</a> 变换</h2><p>上下文变换可以操作绘制在画布上的图像。2D 绘图上下文支持所有常见的绘制变换。在创建绘制上下文时，会以默认值初始化变换矩阵，从而让绘制操作如实应用到绘制结果上。对绘制上下文应用变换，可以导致以不同的变换矩阵应用绘制操作，从而产生不同的结果。</p><ul><li>rotate(angle)：围绕原点把图像旋转 angle 弧度。</li><li>scale(scaleX, scaleY)：通过在 x 轴乘以 scaleX、在 y 轴乘以 scaleY 来缩放图像。scaleX 和 scaleY 的默认值都是 1.0。</li><li>translate(x, y)：把原点移动到(x, y)。执行这个操作后，坐标(0, 0)就会变成(x, y)。</li><li>transform(m1_1, m1_2, m2_1, m2_2, dx, dy)：像下面这样通过矩阵乘法直接修改矩阵。</li><li>setTransform(m1_1, m1_2, m2_1, m2_2, dx, dy)：把矩阵重置为默认值，再以传入的参数调用 transform()。</li></ul>',9);function C(R,_){const a=l("CodeDemo");return p(),u("div",null,[i(" more "),r,t(a,{id:"code-demo-66",type:"normal",title:"%E7%BB%98%E5%88%B6%E7%9F%A9%E5%BD%A2",code:"eJyrVsooyc1RslKySU7MK0ssVshMsY1RSilKLM/MS49RUijPTCnJAIqYGBgAeRmpmekZJUCuEYhrZ6MP0WQXk6eko5RVDDQmJ7VEAapbwVYhJT+5NDc1r0QvPbXENScVxHSq9EzRQLJB0zomT19f4fnCdU/2z322tf/F8o6nM1c8m7L+WU8j1E1A4zPTFDSgWkBmOefnlaRWlGgqVMfkKSiA7EyGiIDsxFAGtM4oBWITSDnItt0znnZse75r0YvOTc/nr3y6dxFIAmqGXlpmTk5wSWVOKtC0GCXltDQDIIhRAmpHVROUmlyiYWigowDCpmAMsgPJhqe9XS8b+p/N6HsxeS4RVhWlJyVqGOgY6BiZmuoY6Jlq4rLUGGgZCCMsrQVGQS0AMLesWg=="},{default:e(()=>[d,m]),_:1}),v,t(a,{id:"code-demo-73",type:"normal",title:"%E7%BB%98%E5%88%B6%E7%9F%A9%E5%BD%A2%E8%BD%AE%E5%BB%93",code:"eJyrVsooyc1RslKySU7MK0ssVshMsY1RSilKLM/MS49RUijPTCnJAIqYGBgAeRmpmekZJUCuEYhrZ6MP0WQXk6eko5RVDDQmJ7VEAapbwVYhJT+5NDc1r0QvPbXENScVxHSq9EzRQLJB0zomT19f4fnCdU/2z322tf/F8o6nM1c8m7L+WU8j1E1A4zPTFDSgWkBmOefnlaRWlGgqVMfkKSiA7EyGiIDsxFAGtM4oBWKTggLIrt0znnZse75r0YvOTS/2rnu6e/LzWS3P5698uncRSAXUKL3ikqL87NTgksqcVKCxMUrKaWkGQBCjBDYHVVVQanKJhqGBjgIIm4IxmnVPe7teNvQ/m9H3YvJc0uwtSk9K1DDQMdAxMjXVMdAz1cTtAmOgzSCMcEEtMGpqAZpbvGo="},{default:e(()=>[g,b]),_:1}),h,x,t(a,{id:"code-demo-85",type:"normal",title:"clearRect()%E6%96%B9%E6%B3%95%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B",code:"eJyNkU1LAkEcxr/KMF1WWHSz9lLqoejQta572XZnX2IcQadMRDAI0tA82EEjsSTKOhQEhRjRl3F29Vs04y6xGUEDD8z/5Xl+A1OGDs1iuAZThk4O9QJwzbQGzbxedImtQVB0Terwzqqi8MpBru1QXiZFmUklAlNGI1CG+wUegxEFoRukgZkzDrKI0LiN6BZG4rpR2jalCCG2rpFEAvg3T5PPnvfamt7XWHfoXTx7jePwTTzetYAUWkTWZo5QdERjoKwRAATTCDqC+WuN45JmQAJAsN47rPbmjwfT+ovff2AfAzEIE+KWi/EuLWHEszS4ZFkKPxqcm6M7O8ig0rIiAyF1rgUCa57Nqi2vcz5t9/6Bytt7uqTIipxUVVmJq7G/oCscJrQAZVdDVm9ORreT0WPAmp02WevavzxhjTHr97323azLp9XvhaAfhRgY6fkflECCUuHfXPkC1Cngzw=="},{default:e(()=>[f,y]),_:1}),q,t(a,{id:"code-demo-145",type:"normal",title:"%E7%BB%98%E7%94%BB%E4%B8%8D%E5%B8%A6%E6%95%B0%E5%AD%97%E7%9A%84%E6%97%B6%E9%92%9F",code:"eJyrVsooyc1RslKySU7MK0ssVshMsY1RSilKLM/MS49RUijPTCnJAIqYGBgAeRmpmekZJUCuEYhrZ6MP0WQXk6eko5RVDDQmJ7VEAapbwVYhJT+5NDc1r0QvPbXENScVxHSq9EzRQLJB0zomT19f4fnCdU/2z322tf/F8o6nM1c8m7L+WU8j1E1A4zPTFDSgWkBmOefnlaRWlGgqVMfkKSiA7EyGiIDsxFAGtM4oBWKTggLQrqcds5/u3vVi+/qn+1pAQlC9ekmp6Zl5AYklGRpwpc93z3jase3pkmlP57QhK00sStYwNDDQUQATlpY6CkDKSEFLwReoXS/AU0chLTGnOBXdnLZWNHNy88tSQ/I1DC1NwEZB1OOwBKiEKEs62l5O6sBmCdQoVEtyMvMQkqZoZj2bvo0Ms4xNkeSAZj3r738+ZTdmeBeXFOVnp4IDuxaYgmoB+QDuBg=="},{default:e(()=>[w,E]),_:1}),A,t(a,{id:"code-demo-152",type:"normal",title:"isPointInPath()%E6%96%B9%E6%B3%95%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B",code:"eJyVUTFLw0AY/SsfN0UoaSy6aNtBcejWoeMtMflMTtPvQnO2SukgOHQQXFxEHJx0spMICvpnTO3P8K6XNhVFEEK47733vfeOG7JYdRO2xeqBT30/AxE2OAt7/kBQxBkMRKhijWx4np5iFFGs9FgzY7NetUtNTvXUblqgPSdTjbMKO8y0fYIKCldoQCiD4y6SciNUewma485pK3RWkte2OZml9E/5Ms7Iq1X4vHv8eL+dPl3O7sf59cP0ajK9OCuuptuIA3CKBOO1K0nhiVqDIScAkxZYxGT+kOm4WmiTAHRWPr7JX19mz5P87dxAxa67j5Ggtq9ix0oXeFf2sSOddc+rgP59JxNBJblpOMOavguFyNpSkGpZ66VLUR4gdQUR9jq2PmdzNZRCEPpxCVSMkGoHl7N5gbJCpnryCIvSJRwkMsOV64wAkwz/k0pS/ZY84qQ/NvoCd27ckw=="},{default:e(()=>[B,T]),_:1}),S])}const V=c(k,[["render",C],["__file","canvas.html.vue"]]);export{V as default};
