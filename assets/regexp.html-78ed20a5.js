import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,a as e,f as p}from"./app-af427ef1.js";const t={},o=p(`<h2 id="常用正式表达式" tabindex="-1"><a class="header-anchor" href="#常用正式表达式" aria-hidden="true">#</a> 常用正式表达式</h2><ol><li><code>\\d</code>数字等价[0-9]</li><li><code>\\D</code>代表的是非数字</li><li><code>\\s</code>空白字符包括换行</li><li><code>\\S</code>非空白符，与上面相反</li><li><code>\\n</code>换行</li><li><code>\\w</code>等价<code>[A-Za-z0-9_]</code></li><li><code>\\W</code>等价<code>[^A-Za-z0-9_]</code></li><li><code>\\t</code></li><li><code>.</code>匹配除换行符(<code>\\n</code>、<code>\\r</code>)之外的任意单个字符，相等于<code>[^\\n\\r]</code></li><li><code>*</code>任意长度，等价<code>{0,}</code></li><li><code>+</code>长度大于1位，等价<code>{1,}</code></li><li><code>?</code>长度0-1位，等价<code>{0,1}</code></li><li><code>[]</code>组合<code>[0-9]</code>表示0-9，<code>[0-9a-z.$]</code>表示<code>0-9</code>或者<code>a-z</code>或者<code>.</code>或者<code>$</code></li><li><code>{}</code>长度显示，<code>{0,5}</code>表示长度0-5，<code>{5}</code>表示长度5，<code>{1,}</code>表示长度大于1</li><li><code>^</code>以什么开头，如果在<code>[]</code>中出现，那么表示非，取反的意思</li><li><code>$</code>表示以什么结尾</li><li><code>//g</code>正则后面的g代表全量匹配，会匹配多次</li></ol><h2 id="代码示例" tabindex="-1"><a class="header-anchor" href="#代码示例" aria-hidden="true">#</a> 代码示例</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> reg1 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\d</span><span class="token regex-delimiter">/</span></span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;13&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//打印为true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;a13b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//打印为true</span>

<span class="token comment">//由此可见，reg1是当有数字的时候就会返回true，如果我想完全由数字匹配返回true，可以这么修改</span>

<span class="token keyword">const</span> reg2 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\d$</span><span class="token regex-delimiter">/</span></span>   <span class="token comment">//^以数字开头、$代表以数字结尾，匹配的是一位数字</span>

<span class="token keyword">const</span> reg3 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\d\\d$</span><span class="token regex-delimiter">/</span></span>   <span class="token comment">//^以数字开头、$代表以数字结尾，匹配的是两位数字</span>
<span class="token keyword">const</span> reg4 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\d{2}$</span><span class="token regex-delimiter">/</span></span>  <span class="token comment">//^以数字开头、$代表以数字结尾，匹配的是两位数字</span>
<span class="token keyword">const</span> reg5 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\d{2,4}$</span><span class="token regex-delimiter">/</span></span>  <span class="token comment">//^以数字开头、$代表以数字结尾，匹配的是2位到4位数字</span>
<span class="token keyword">const</span> reg6 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\d{2,}$</span><span class="token regex-delimiter">/</span></span>  <span class="token comment">//^以数字开头、$代表以数字结尾，匹配的是2位以上的数字</span>

<span class="token keyword">const</span> reg7 <span class="token operator">=</span> <span class="token operator">/</span><span class="token operator">^</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">d+$</span><span class="token regex-delimiter">/</span></span> <span class="token comment">//  /d等价于{1,}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="案例示例" tabindex="-1"><a class="header-anchor" href="#案例示例" aria-hidden="true">#</a> 案例示例</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//校验手机号</span>
<span class="token keyword">const</span> reg1 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^1\\d{10}$</span><span class="token regex-delimiter">/</span></span> <span class="token comment">//以1开头，后面是10为数字即可匹配为true</span>

<span class="token comment">//座机号，此正则仅满足短横线连接的座机号，即：020-1234567、020-12345678、0210-1234567、0210-12345678这种格式的</span>
<span class="token keyword">const</span> reg2 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\d{3,4}-\\d{7,8}$</span><span class="token regex-delimiter">/</span></span>

<span class="token comment">//若还想满足以“-”连接或以“/”连接，可参考写明的：</span>
<span class="token keyword">const</span> reg3 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\d{3,4}(-|\\/)\\d{7,8}$</span><span class="token regex-delimiter">/</span></span> <span class="token comment">//因为(-|/)中的&quot;/&quot;是正则表达式里的，需要加“\\”来进行转义</span>

<span class="token comment">//4位验证码的判断</span>
<span class="token keyword">const</span> reg4 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\d{4}$</span><span class="token regex-delimiter">/</span></span>

<span class="token comment">//邮箱判断</span>
<span class="token keyword">const</span> reg5 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[0-9a-z_]{2,20}@[0-9a-z]{1,10}[.a-z0-9]+[^.]$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span>
<span class="token comment">/*
	1、[0-9a-z_]代表的意思是可以是0到9的数字、可以是a-z的字母，还可以是下划线，-代表的是区间
  2、[ABCD1234]这种没有-代表区间，那么代表的意思就是可以是ABCD1234其中的任意一位
  3、[^.]当^出现在[]里面的是时代表取反，这句话的意思是，除了.以外的
	最后的i表示忽略大小写
*/</span>

<span class="token comment">//去除字符串中，非数字的部分</span>
<span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&#39;abc123aa&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\d</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//打印结果位abcaa</span>
<span class="token comment">//这里的/g代表的意思就是全部匹配，如果不加这个的话，代表只会匹配一次就不会执行了，加上g就会全部匹配。直到不满足条件时候。</span>

<span class="token comment">//去除非字符串的部分</span>
<span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&#39;abc13aa&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[^0-9]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//打印结果为13，[]里出现^代表的是取反，这里代表的是除了0-9</span>

<span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&#39;abc123aa&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\D</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//打印结果为123，\\D代表的是非数字</span>

<span class="token comment">//身份证号验证</span>
<span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^1\\d{1-16}(\\d|X){1}$</span><span class="token regex-delimiter">/</span></span>


<span class="token comment">//获取url参数</span>
<span class="token comment">/*
	*?	非贪婪匹配，会一直找，找到后面的正则规则为止
  abc 后面匹配的就是$，即是结束标签
  .   相当于[^\\n\\r]相当于除换行
  连起来匹配除换行字符外，直到匹配到&amp;或结束$后停止匹配
*/</span>
<span class="token keyword">function</span> <span class="token function">querystring</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token string">&#39;?id=55&amp;name=abc&#39;</span>
  <span class="token keyword">const</span> reg <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">math</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">id=(.*?)(&amp;|$)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> reg <span class="token operator">?</span> reg<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token keyword">null</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">querystring</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>


<span class="token comment">//动态获取参数</span>
<span class="token comment">/*
	当我们需要写动态正则的时候，可以RegExp对象，把正则字符串传进去
*/</span>
<span class="token keyword">function</span> <span class="token function">queryString</span><span class="token punctuation">(</span><span class="token parameter">path<span class="token punctuation">,</span>key</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">&#39;=(.*?)(&amp;|$)&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> exp <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">math</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span>
   <span class="token keyword">return</span> exp <span class="token operator">?</span> exp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token keyword">null</span>
<span class="token punctuation">}</span>


<span class="token comment">//过滤html标签</span>
<span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&#39;&lt;div&gt;&lt;a href=&quot;&quot;&gt;点击跳转&lt;/a&gt;&lt;img src=&quot;http:xx.xx.xx&quot; /&gt;&lt;/div&gt;&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&lt;([^&gt;])&gt;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//打印为：点击跳转</span>

<span class="token comment">// 只保留图片标签</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&lt;\\/?([a-z]).*?&gt;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">ig</span></span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">res<span class="token punctuation">,</span>group1</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>group1 <span class="token operator">===</span> <span class="token string">&quot;img&quot;</span> <span class="token operator">||</span> group1 <span class="token operator">===</span> <span class="token string">&quot;p&quot;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//同时保留img标签和p标签</span>
    <span class="token keyword">return</span> res
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token string">&#39;&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>


<span class="token comment">//字符串模板</span>
<span class="token keyword">const</span> text <span class="token operator">=</span> <span class="token string">&#39;{name}说，今天天气{desc}。&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">desc</span><span class="token operator">:</span><span class="token string">&quot;真好&quot;</span>
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>text<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\{(.*?)\\}</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">result<span class="token punctuation">,</span>group1</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  <span class="token keyword">return</span> obj<span class="token punctuation">[</span>group1<span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>


<span class="token comment">//去除多余的空格</span>
<span class="token keyword">const</span> text<span class="token operator">=</span><span class="token string">&quot;  你  好   &quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;---&#39;</span> <span class="token operator">+</span> text<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\s</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39;---&#39;</span><span class="token punctuation">)</span>

<span class="token comment">//去除两边的空格，保留中间的空格</span>
<span class="token keyword">const</span> text<span class="token operator">=</span><span class="token string">&quot;  你  好   &quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;---&#39;</span> <span class="token operator">+</span> text<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\s+|\\s+$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39;---&#39;</span><span class="token punctuation">)</span><span class="token comment">//此正则的意思是去除两边空格，去掉以空格开头或者以空格结尾，空格可能多个，所以用+</span>


<span class="token comment">//数据格式化</span>
<span class="token keyword">const</span> text <span class="token operator">=</span> <span class="token string">&quot;xxxx;张三：15555555555&quot;</span><span class="token punctuation">,</span>2222asdasaz<span class="token punctuation">;</span>xxxx<span class="token punctuation">;</span>xxx<span class="token punctuation">;</span>李四：<span class="token number">16666666666</span><span class="token punctuation">,</span>2222asdasaz<span class="token punctuation">;</span>xxxx
<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
text<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">;([\\u4e00-\\u9fa5]+)：(1\\d{10}),([0-9a-z]+);</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">result<span class="token punctuation">,</span>group1<span class="token punctuation">,</span>group2<span class="token punctuation">,</span>group3</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span>group1<span class="token punctuation">,</span>
    <span class="token literal-property property">phone</span><span class="token operator">:</span>group2<span class="token punctuation">,</span>
    <span class="token literal-property property">orderid</span><span class="token operator">:</span>group3<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注：<br> 1、当正则表达式出现非正则语义的字符，就表示为普通字符。<br> 2、如果正则表达式中，想把“/”当普通字符使用，必须要用“\\”来进行转义<br> 3、如果想使用或者条件，则可以用“()”括起来，在括号里使用“|”来表示或，做或者条件。</p><p>千分位</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">999999</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//打印结果为：9,999,99</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,9);function c(l,i){return s(),a("div",null,[e(" more "),o])}const k=n(t,[["render",c],["__file","regexp.html.vue"]]);export{k as default};
