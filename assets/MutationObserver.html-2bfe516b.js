import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as t,c as e,a as o,b as n,d as s,f as p}from"./app-af427ef1.js";const c={},i=n("p",null,[s("DOM规范中的"),n("code",null,"MutationObserver"),s("接口，可以在DOM被修改时异步执行回调。使用"),n("code",null,"MutationObserver"),s("可以观察整个文档、DOM树的一部分，或某个元素。此外还可以观察元素属性、子节点、文本，或者前三者任意组合的变化。")],-1),l=p(`<div class="hint-container warning"><p class="hint-container-title">注意</p><p>新引进 MutationObserver 接口是为了取代废弃的 MutationEvent。</p></div><h2 id="基本方法" tabindex="-1"><a class="header-anchor" href="#基本方法" aria-hidden="true">#</a> 基本方法</h2><p><code>MutationObserver</code> 的实例要通过调用 <code>MutationObserver</code> 构造函数并传入一个回调函数来创建：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> observer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MutationObserver</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;DOM was mutated!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>1. observe()方法</strong><br> 新创建的 <code>MutationObserver</code> 实例不会关联 DOM 的任何部分。要把这个 observer 与 DOM 关联起来，需要使用 observe()方法。<br> 这个方法接收两个必需的参数：</p><ul><li>观察其变化的DOM节点</li><li>一个 MutationObserverInit 对象</li></ul><p>MutationObserverInit 对象用于控制观察哪些方面的变化，是一个键/值对形式配置选项的字典。如下面代码会创建一个观察者（observer）并配置它观察<code>&lt;body&gt;</code>元素上的属性变化：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> observer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MutationObserver</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;body&gt; attributes changed&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

observer<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>body<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">attributes</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Changed body class&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Changed body class</span>
<span class="token comment">// &lt;body&gt; attributes changed </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行以上代码后，<code>&lt;body&gt;</code>元素上任何属性发生变化都会被这个 MutationObserver 实例发现，然后就会异步执行注册的回调函数。<code>&lt;body&gt;</code>元素后代的修改或其他非属性修改都不会触发回调进入任务队列。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>回调中的 console.log()是后执行的。这表明回调并非与实际的 DOM 变化同步执行。</p></div><p><strong>2. 回调与MutationRecord</strong><br> 每个回调都会收到一个 MutationRecord 实例的数组。MutationRecord 实例包含的信息包括发生了什么变化，以及 DOM 的哪一部分受到了影响。因为回调执行之前可能同时发生多个满足观察条件的事件，所以每次执行回调都会传入一个包含按顺序入队的 MutationRecord 实例的数组。</p>`,11);function r(u,d){return t(),e("div",null,[i,o(" more "),l])}const b=a(c,[["render",r],["__file","MutationObserver.html.vue"]]);export{b as default};
