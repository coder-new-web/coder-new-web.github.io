import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as s,o as i,c,b as e,d as a,e as l,w as r,a as d,f as p}from"./app-af427ef1.js";const o={},u=e("p",null,"学习路线：React基础 -> React Hooks -> React路由 -> Redux -> 组件库 -> immutable -> Mobx -> React + TS -> 单元测试 -> dva + umi",-1),m=p(`<h2 id="什么是react" tabindex="-1"><a class="header-anchor" href="#什么是react" aria-hidden="true">#</a> 什么是React</h2><p>React 是一个用于构建用户界面的 JavaScript 库。</p><h2 id="为什么学习react开发" tabindex="-1"><a class="header-anchor" href="#为什么学习react开发" aria-hidden="true">#</a> 为什么学习React开发</h2><ul><li>声明式设计——React采用声明范式，可以轻松描述应用。</li><li>高效——React通过对DOM的模拟（虚拟DOM），最大限度低减少与DOM的交互。</li><li>灵活——React可以与已知的库或框架很好地配合</li><li>JSX——JSX是JavaScript语法的扩展</li><li>组件化——通过React构建组件，使得代码更加容易得到复用，能够很好的应用在大项目的开发中。</li><li>单向数据流——React实现了单向响应的数据流，从而减少了重复代码，这也是它为什么比传统数据绑定更简单。</li><li>虚拟DOM <ul><li>传统DOM更新：真实页面对应一个DOM树。在传统页面的开发模式中，每次需要更新页面时，都要手动操作DOM来进行更新</li><li>虚拟DOM：DOM操作非常昂贵，我们都指导在前端开发中，性能消耗最大的就是DOM操作，而且这部分代码会让整体项目的代码变得难以维护。React把真实DOM树转换成JavaScript对象树，也就是Virtual DOM</li></ul></li></ul><h2 id="什么是mvc" tabindex="-1"><a class="header-anchor" href="#什么是mvc" aria-hidden="true">#</a> 什么是MVC</h2><p>MVC 是一种软件设计模式，代表模型-视图-控制器（Model-View-Controller）的缩写。它是一种将应用程序的逻辑和用户界面进行分离的架构模式，旨在提高代码的可维护性、可扩展性和重用性。</p><p>MVC 模式将应用程序分为三个核心组件：</p><ol><li>模型（Model）：模型表示应用程序的数据和业务逻辑。它负责管理数据的状态、操作和持久化。模型通常包含数据的定义、访问和修改方法。</li><li>视图（View）：视图负责呈现模型的数据和状态给用户界面。它是用户界面的可视化部分，负责展示数据、接收用户输入和显示操作结果。</li><li>控制器（Controller）：控制器是模型和视图之间的中间层，负责协调模型和视图之间的通信。它接收用户的输入，根据输入调用适当的模型方法进行处理，并将结果反映到视图中。</li></ol><p>MVC 模式的优势在于它能够将应用程序的不同部分进行解耦，使其易于维护和扩展。通过将业务逻辑和用户界面分离，开发人员可以更好地组织代码、实现单一责任原则，并且可以独立地修改和测试每个组件。此外，MVC 模式还促进了团队的协作，因为开发人员可以同时处理模型、视图和控制器的不同方面。</p><h2 id="react与传统mvc的关系" tabindex="-1"><a class="header-anchor" href="#react与传统mvc的关系" aria-hidden="true">#</a> React与传统MVC的关系</h2><p>React 并不是一个传统意义上的 MVC（模型-视图-控制器）框架，而是一个用于构建用户界面的 JavaScript 库。它采用了一种称为组件化的方式来构建用户界面，使开发人员能够将界面拆分为独立的可重用组件，并管理这些组件的状态和交互。</p><p>在传统的 MVC 模式中，控制器负责处理用户输入和业务逻辑，视图负责呈现数据，模型负责管理数据和状态。而在 React 中，没有明确的控制器角色。相反，React 使用组件作为构建块，并通过组件的状态、属性和生命周期方法来管理数据和逻辑。React 的核心思想是构建可组合、可重用的 UI 组件，而不是严格遵循 MVC 的分层架构。</p><p>然而，虽然 React 不是传统的 MVC 框架，但它可以与其他框架或库结合使用，以构建符合 MVC 架构的应用程序。例如，结合使用 React 和 Redux 可以实现状态管理，并将数据的获取和处理逻辑从组件中分离出来，使其更接近传统的 MVC 模式。</p><p>总而言之，React 是一个用于构建用户界面的库，它采用了组件化的方式来管理界面的状态和交互，而不是一个严格遵循传统 MVC 模式的框架。</p><h2 id="创建项目" tabindex="-1"><a class="header-anchor" href="#创建项目" aria-hidden="true">#</a> 创建项目</h2><h3 id="基于webpack创建" tabindex="-1"><a class="header-anchor" href="#基于webpack创建" aria-hidden="true">#</a> 基于webpack创建</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>npx create-react-app <span class="token punctuation">[</span>projectName<span class="token punctuation">]</span>

<span class="token comment"># or</span>

<span class="token function">npm</span> <span class="token function">install</span> create-react-app <span class="token parameter variable">-g</span>

create-react-app <span class="token punctuation">[</span>projectName<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="基于vite创建" tabindex="-1"><a class="header-anchor" href="#基于vite创建" aria-hidden="true">#</a> 基于vite创建</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># npm 6.x</span>
<span class="token function">npm</span> init vite@latest <span class="token punctuation">[</span>projectName<span class="token punctuation">]</span> <span class="token parameter variable">--template</span> vue

<span class="token comment"># npm 7+, extra double-dash is needed:</span>
<span class="token function">npm</span> init vite@latest <span class="token punctuation">[</span>projectName<span class="token punctuation">]</span> -- <span class="token parameter variable">--template</span> react
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,19);function h(v,b){const n=s("RouterLink");return i(),c("div",null,[e("p",null,[a("前提必备：学习JSX，如果没有学习JSX，建议先了解下"),l(n,{to:"/web/react/jsx.html"},{default:r(()=>[a("JSX")]),_:1})]),u,d(" more "),m])}const R=t(o,[["render",h],["__file","react.html.vue"]]);export{R as default};
