import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as n,f as t}from"./app-af427ef1.js";const e={},p=t(`<h2 id="script标签属性" tabindex="-1"><a class="header-anchor" href="#script标签属性" aria-hidden="true">#</a> script标签属性</h2><ul><li><code>async</code>：可选。表示应该立即开始下载脚本，但不能阻止其它页面动作，比如下载资源或等到其它脚本加载，只对外部脚本文件有效。</li><li><code>defer</code>：可选。表示脚本可以延迟到文档完全被解析和显示之后再执行。只对外部脚本文件有效。简单说，浏览器会立即下载但延迟执行</li><li><code>charset</code>：可选。使用src属性指定的代码字符集。这个属性很少使用，因为大多数浏览器不在乎它的值。</li><li><code>crossorigin</code>：可选。配置相关请求的CORS（跨域资源共享）设置。默认不设置CORS。<code>crossorigin=&quot;anonymous&quot;</code>配置文件请求不必设置凭据标志。<br><code>crossorigin=&quot;use-credentials&quot;</code>设置凭据标志，意味着出战请求会包含凭据。</li><li><code>integrity</code>：可选，允许比对接收到的资源和指定的加密签名以验证子资源完整性。如果接收到的资源的签名与这个属性指定的签名不匹配，则页面会报错，脚本不会执行。这个属性可以用于CDN不会提供而已内容。这个属性并不是所有浏览器都支持</li><li><code>language</code>：废弃</li><li><code>src</code>：可选。表示包含要执行的代码的外部文件。</li><li><code>type</code>：可选。代替<code>language</code>，表示代码块钟脚本语言的内容类型（也称MIME类型）。按照管理，这个值始终都是<code>text/javascript</code>，尽管<code>text/application</code>和<code>text/ecmascript</code>都已经废弃。js文件的MIME类型通常是<code>application/x-javascript</code>。如果这个值为module，则代码会被当成ES6模块，而且只有这时候代码中才能出现import和export关键字。</li></ul><p><strong>注意</strong></p><ol><li>script标签的src属性与行类代码，若两者都提供，则浏览器只会下载并执行脚本文件，从而忽略行内代码。</li><li>为什么推荐外联js文件？ <ul><li>可维护性</li><li>可以缓存</li><li>适应未来</li></ul></li></ol><h2 id="标签位置" tabindex="-1"><a class="header-anchor" href="#标签位置" aria-hidden="true">#</a> 标签位置</h2><h3 id="head里" tabindex="-1"><a class="header-anchor" href="#head里" aria-hidden="true">#</a> head里</h3><p><code>&lt;script&gt;</code>标签放在<code>head</code>里，意味着必须把所有js都下载、解析和解释完成后，才能开始渲染页面</p><h3 id="defer" tabindex="-1"><a class="header-anchor" href="#defer" aria-hidden="true">#</a> defer</h3><p>在<code>script</code>元素上设置defer属性，相当于告诉浏览器立即下载，但延迟执行。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span> 
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span> 
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Example HTML Page<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span> 
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">defer</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>example1.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span> 
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">defer</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>example2.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span> 
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span> 
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span> 
 <span class="token comment">&lt;!-- 这里是页面内容 --&gt;</span> 
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>虽然这个例子中的<code>&lt;script&gt;</code>元素包含在页面的<code>&lt;head&gt;</code>中，但它们会在浏览器解析到结束的<code>&lt;/html&gt;</code>标签后才会执行。HTML5 规范要求脚本应该按照它们出现的顺序执行，因此第一个推迟的脚本会在第二个推迟的脚本之前执行，而且两者都会在 DOMContentLoaded 事件之前执行。不过在实际当中，推迟执行的脚本不一定总会按顺序执行或者在 DOMContentLoaded事件之前执行，因此最好只包含一个这样的脚本。</p><p>如前所述，defer 属性只对外部脚本文件才有效。这是 HTML5 中明确规定的，因此支持 HTML5的浏览器会忽略行内脚本的 defer 属性。IE4~7 展示出的都是旧的行为，IE8 及更高版本则支持 HTML5定义的行为。</p><p>对 defer 属性的支持是从 IE4、Firefox 3.5、Safari 5 和 Chrome 7 开始的。其他所有浏览器则会忽略这<br> 个属性，按照通常的做法来处理脚本。考虑到这一点，还是把要推迟执行的脚本放在页面底部比较好。</p><h3 id="async" tabindex="-1"><a class="header-anchor" href="#async" aria-hidden="true">#</a> async</h3><p>在<code>script</code>元素上设置async属性，告诉浏览器立即下载。不过，与defer不同的是，标记为async的脚本并不保证能按照他们出现的次序执行，比如：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span> 
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span> 
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Example HTML Page<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span> 
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">async</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>example1.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span> 
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">async</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>example2.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span> 
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span> 
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span> 
 <span class="token comment">&lt;!-- 这里是页面内容 --&gt;</span> 
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，第二个脚本可能先于第一个脚本执行。因此，重点在于它们之间没有依赖关系。给脚本添加 async 属性的目的是告诉浏览器，不必等脚本下载和执行完后再加载页面，同样也不必等到该异步脚本下载和执行后再加载其他脚本。正因为如此，异步脚本不应该在加载期间修改 DOM。<br> 异步脚本保证会在页面的 load 事件前执行，但可能会在 DOMContentLoaded之前或之后。</p><p>Firefox 3.6、Safari 5 和 Chrome 7 支持异步脚本。使用 async 也会告诉页面你不会使用document.write，不过好的 Web 开发实践根本就不推荐使用这个方法。</p><h2 id="动态加载脚本" tabindex="-1"><a class="header-anchor" href="#动态加载脚本" aria-hidden="true">#</a> 动态加载脚本</h2><ol><li>第一种</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;script&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
script<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">&#39;gibberish.js&#39;</span><span class="token punctuation">;</span> 
document<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认情况下，以这种方式创建的<code>&lt;script&gt;</code>元素是以异步方式加载的，相当于添加了 <code>async</code> 属性。不过这样做可能会有问题，因为所有浏览器都支持 <code>createElement()</code>方法，但不是所有浏览器都支持 <code>async</code> 属性。因此，如果要统一动态脚本的加载行为，可以明确将其设置为同步加载：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;script&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
script<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">&#39;gibberish.js&#39;</span><span class="token punctuation">;</span> 
script<span class="token punctuation">.</span>async <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> 
document<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>第二种</li></ol><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>preload<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>gibberish.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="noscript元素" tabindex="-1"><a class="header-anchor" href="#noscript元素" aria-hidden="true">#</a> noscript元素</h2><p>使用场景：</p><ol><li>浏览器不支持脚本</li><li>浏览器对脚本的支持关闭</li></ol><p>使用示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">&gt;</span> 
<span class="token operator">&lt;</span>html<span class="token operator">&gt;</span> 
 <span class="token operator">&lt;</span>head<span class="token operator">&gt;</span> 
 <span class="token operator">&lt;</span>title<span class="token operator">&gt;</span>Example <span class="token constant">HTML</span> Page<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">&gt;</span> 
 <span class="token operator">&lt;</span>script defer<span class="token operator">=</span><span class="token string">&quot;defer&quot;</span> src<span class="token operator">=</span><span class="token string">&quot;example1.js&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span> 
 <span class="token operator">&lt;</span>script defer<span class="token operator">=</span><span class="token string">&quot;defer&quot;</span> src<span class="token operator">=</span><span class="token string">&quot;example2.js&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span> 
 <span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span> 
 <span class="token operator">&lt;</span>body<span class="token operator">&gt;</span> 
 <span class="token operator">&lt;</span>noscript<span class="token operator">&gt;</span> 
 <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>This page requires a JavaScript<span class="token operator">-</span>enabled browser<span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span> 
 <span class="token operator">&lt;</span><span class="token operator">/</span>noscript<span class="token operator">&gt;</span> 
 <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span> 
<span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><ul><li>要包含外部 JavaScript 文件，必须将 src 属性设置为要包含文件的 URL。文件可以跟网页在同一台服务器上，也可以位于完全不同的域。</li><li>所有<code>&lt;script&gt;</code>元素会依照它们在网页中出现的次序被解释。在不使用 defer 和 async 属性的情况下，包含在<code>&lt;script&gt;</code>元素中的代码必须严格按次序解释。</li><li>对不推迟执行的脚本，浏览器必须解释完位于<code>&lt;script&gt;</code>元素中的代码，然后才能继续渲染页面的剩余部分。为此，通常应该把<code>&lt;script&gt;</code>元素放到页面末尾，介于主内容之后及<code>&lt;/body&gt;</code>标签之前。</li><li>可以使用 defer 属性把脚本推迟到文档渲染完毕后再执行。推迟的脚本原则上按照它们被列出的次序执行。</li><li>可以使用 async 属性表示脚本不需要等待其他脚本，同时也不阻塞文档渲染，即异步加载。异步脚本不能保证按照它们在页面中出现的次序执行。</li><li>通过使用<code>&lt;noscript&gt;</code>元素，可以指定在浏览器不支持脚本时显示的内容。如果浏览器支持并启用脚本，则<code>&lt;noscript&gt;</code>元素中的任何内容都不会被渲染</li></ul>`,32),o=[p];function c(l,i){return a(),n("div",null,o)}const d=s(e,[["render",c],["__file","script.html.vue"]]);export{d as default};
