import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{o as n,c as a,a as s,b as e,f as l}from"./app-af427ef1.js";const p={},i=e("p",null,"定型数组（typed array）是 ECMAScript 新增的结构，目的是提升向原生库传输数据的效率。实际上，JavaScript 并没有“TypedArray”类型，它所指的其实是一种特殊的包含数值类型的数组。为理解如何使用定型数组，有必要先了解一下它的用途。",-1),o=l(`<h2 id="arraybuffer" tabindex="-1"><a class="header-anchor" href="#arraybuffer" aria-hidden="true">#</a> ArrayBuffer</h2><p>Float32Array 实际上是一种“视图”，可以允许 JavaScript 运行时访问一块名为 ArrayBuffer 的预分配内存。ArrayBuffer 是所有定型数组及视图引用的基本单位。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>SharedArrayBuffer 是 ArrayBuffer 的一个变体，可以无须复制就在执行上下文间传递它。</p></div><p>ArrayBuffer()是一个普通的 JavaScript 构造函数，可用于在内存中分配特定数量的字节空间。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBuffer</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 在内存中分配 16 字节</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buf<span class="token punctuation">.</span>byteLength<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 16 </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>ArrayBuffer 一经创建就不能再调整大小。不过，可以使用 slice()复制其全部或部分到一个新实例中：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> buf1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBuffer</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 数组操作方法，如pop、push、shift、unshift、splice在这里都是不可用的</span>

<span class="token comment">// 但是可以使用slice</span>
<span class="token keyword">const</span> buf2 <span class="token operator">=</span> buf1<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buf2<span class="token punctuation">.</span>byteLength<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ArrayBuffer 某种程度上类似于 C++的 malloc()，但也有几个明显的区别：</p><ul><li>malloc()在分配失败时会返回一个 null 指针。ArrayBuffer 在分配失败时会抛出错误。</li><li>malloc()可以利用虚拟内存，因此最大可分配尺寸只受可寻址系统内存限制。ArrayBuffer分配的内存不能超过 Number.MAX_SAFE_INTEGER（253  1）字节。</li><li>malloc()调用成功不会初始化实际的地址。声明 ArrayBuffer 则会将所有二进制位初始化为 0。</li><li>通过 malloc()分配的堆内存除非调用 free()或程序退出，否则系统不能再使用。而通过声明ArrayBuffer 分配的堆内存可以被当成垃圾回收，不用手动释放。</li></ul><p>不能仅通过对 ArrayBuffer 的引用就读取或写入其内容。要读取或写入 ArrayBuffer，就必须通过视图。视图有不同的类型，但引用的都是 ArrayBuffer 中存储的二进制数据。</p><h2 id="dataview" tabindex="-1"><a class="header-anchor" href="#dataview" aria-hidden="true">#</a> DataView</h2><p><mark>待后续补充</mark></p><p><strong>ElementType</strong><br> ECMAScript 6 支持 8 种不同的 ElementType：</p><table><thead><tr><th style="text-align:left;">ElementType</th><th style="text-align:left;">字 节</th><th style="text-align:left;">说 明</th><th style="text-align:left;">等价的 C 类型</th><th style="text-align:left;">值的范围</th></tr></thead><tbody><tr><td style="text-align:left;">Int8</td><td style="text-align:left;">1</td><td style="text-align:left;">8 位有符号整数</td><td style="text-align:left;">signed char</td><td style="text-align:left;">-128~127</td></tr><tr><td style="text-align:left;">Uint8</td><td style="text-align:left;">1</td><td style="text-align:left;">8 位无符号整数</td><td style="text-align:left;">unsigned char</td><td style="text-align:left;">0~255</td></tr><tr><td style="text-align:left;">Int16</td><td style="text-align:left;">2</td><td style="text-align:left;">16 位有符号整数</td><td style="text-align:left;">short</td><td style="text-align:left;">-32 768~32 767</td></tr><tr><td style="text-align:left;">Uint16</td><td style="text-align:left;">2</td><td style="text-align:left;">16 位无符号整数</td><td style="text-align:left;">unsigned short</td><td style="text-align:left;">0~65 535</td></tr><tr><td style="text-align:left;">Int32</td><td style="text-align:left;">4</td><td style="text-align:left;">32 位有符号整数</td><td style="text-align:left;">int</td><td style="text-align:left;">-2 147 483 648~2 147 483 647</td></tr><tr><td style="text-align:left;">Uint32</td><td style="text-align:left;">4</td><td style="text-align:left;">32 位无符号整数</td><td style="text-align:left;">unsigned int</td><td style="text-align:left;">0~4 294 967 295</td></tr><tr><td style="text-align:left;">Float32</td><td style="text-align:left;">4</td><td style="text-align:left;">32 位 IEEE-754 浮点数</td><td style="text-align:left;">float</td><td style="text-align:left;">-3.4e+38~+3.4e+38</td></tr><tr><td style="text-align:left;">Float64</td><td style="text-align:left;">8</td><td style="text-align:left;">64 位 IEEE-754 浮点数</td><td style="text-align:left;">double</td><td style="text-align:left;">-1.7e+308~+1.7e+308</td></tr></tbody></table><p>突如其来写一个生成随机rgb色值</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> uint8Array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
window<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span><span class="token function">getRandomValues</span><span class="token punctuation">(</span>uint8Array<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> randomColor <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>uint8Array<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>randomColor<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16);function r(c,d){return n(),a("div",null,[i,s(" more "),o])}const y=t(p,[["render",r],["__file","TypedArray.html.vue"]]);export{y as default};
