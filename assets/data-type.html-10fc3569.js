import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as t,c as s,a,b as e,f as l}from"./app-af427ef1.js";const o={},p=e("p",null,"ECMAScript有六种简单的数据类型（也称为原始类型）：Undefined、Null、Boolean、Number、String和Symbol。一种复杂的数据类型：Object（对象）",-1),i=l(`<h2 id="undefined类型" tabindex="-1"><a class="header-anchor" href="#undefined类型" aria-hidden="true">#</a> Undefined类型</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> message<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message <span class="token operator">==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>

<span class="token keyword">let</span> message2 <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message2 <span class="token operator">==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>变量 message 在声明的时候并未初始化。而在比较它和 undefined 的字面值时，两者是相等的。</p><h2 id="null类型" tabindex="-1"><a class="header-anchor" href="#null类型" aria-hidden="true">#</a> Null类型</h2><h2 id="boolean类型" tabindex="-1"><a class="header-anchor" href="#boolean类型" aria-hidden="true">#</a> Boolean类型</h2><p>不同类型与布尔之间的转换规则：</p><table><thead><tr><th style="text-align:left;">数据类型</th><th style="text-align:left;">转换为true的值</th><th style="text-align:left;">转换为false的值</th></tr></thead><tbody><tr><td style="text-align:left;">Boolean</td><td style="text-align:left;">true</td><td style="text-align:left;">false</td></tr><tr><td style="text-align:left;">String</td><td style="text-align:left;">非空字符串</td><td style="text-align:left;">&quot;&quot;（空字符串）</td></tr><tr><td style="text-align:left;">Number</td><td style="text-align:left;">非零数值（包括无穷值）</td><td style="text-align:left;">0、NaN</td></tr><tr><td style="text-align:left;">Object</td><td style="text-align:left;">任意对象</td><td style="text-align:left;">null</td></tr><tr><td style="text-align:left;">Undefined</td><td style="text-align:left;">N/A不存在</td><td style="text-align:left;">undefined</td></tr></tbody></table><h2 id="number类型" tabindex="-1"><a class="header-anchor" href="#number类型" aria-hidden="true">#</a> Number类型</h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p>使用 Number.NEGATIVE_INFINITY 和 Number.POSITIVE_INFINITY 也可以获取正、负 Infinity。没错，这两个属性包含的值分别就是-Infinity 和 Infinity。</p></div><p>Number()函数基于如下规则执行转换：</p><ul><li>布尔值，true 转换为 1，false 转换为 0。</li><li>数值，直接返回。</li><li>null，返回 0。</li><li>undefined，返回 NaN。</li><li>字符串，应用以下规则。 <ul><li>如果字符串包含数值字符，包括数值字符前面带加、减号的情况，则转换为一个十进制数值。因此，Number(&quot;1&quot;)返回 1，Number(&quot;123&quot;)返回 123，Number(&quot;011&quot;)返回 11（忽略前面的零）。</li><li>如果字符串包含有效的浮点值格式如&quot;1.1&quot;，则会转换为相应的浮点值（同样，忽略前面的零）。</li><li>如果字符串包含有效的十六进制格式如&quot;0xf&quot;，则会转换为与该十六进制值对应的十进制整数值。</li><li>如果是空字符串（不包含字符），则返回 0。</li><li>如果字符串包含除上述情况之外的其他字符，则返回 NaN。</li></ul></li><li>对象，调用 valueOf()方法，并按照上述规则转换返回的值。如果转换结果是 NaN，则调用<br> toString()方法，再按照转换字符串的规则转换。</li></ul><h2 id="string类型" tabindex="-1"><a class="header-anchor" href="#string类型" aria-hidden="true">#</a> String类型</h2><p>String数据类型表示零或多个16位Unicode字符序列。可以用双引号（&quot; &quot;）、单引号（&#39; &#39;）或反引号（<code></code>）表示。</p><p><strong>字符字面量</strong><br> 字符串数据类型包含一些字符字面量，用于表示非打印字符或其它用途的字符，如下表所示。</p><table><thead><tr><th style="text-align:left;">字面量</th><th style="text-align:left;">含义</th></tr></thead><tbody><tr><td style="text-align:left;">\\n</td><td style="text-align:left;">换行</td></tr><tr><td style="text-align:left;">\\t</td><td style="text-align:left;">制表</td></tr><tr><td style="text-align:left;">\\b</td><td style="text-align:left;">退格</td></tr><tr><td style="text-align:left;">\\r</td><td style="text-align:left;">回车</td></tr><tr><td style="text-align:left;">\\f</td><td style="text-align:left;">换页</td></tr><tr><td style="text-align:left;">\\</td><td style="text-align:left;">反斜杠（\\）</td></tr><tr><td style="text-align:left;">&#39;</td><td style="text-align:left;">单引号（&#39;），在字符串以单引号标示时使用，例如&#39;He said, &#39;hey.&#39;&#39;</td></tr><tr><td style="text-align:left;">&quot;</td><td style="text-align:left;">双引号（&quot;），在字符串以双引号标示时使用，例如&quot;He said, &quot;hey.&quot;&quot;</td></tr><tr><td style="text-align:left;">\`</td><td style="text-align:left;">反引号（<code>），在字符串以反引号标示时使用，例如</code>He said, \`hey.\`\`</td></tr><tr><td style="text-align:left;">\\xnn</td><td style="text-align:left;">以十六进制编码 nn 表示的字符（其中 n 是十六进制数字 0~F），例如\\x41 等于&quot;A&quot;</td></tr><tr><td style="text-align:left;">\\unnnn</td><td style="text-align:left;">以十六进制编码 nnnn 表示的 Unicode 字符（其中 n 是十六进制数字 0~F），例如\\u03a3 等于希腊字符&quot;Σ&quot;</td></tr></tbody></table><p><strong>转换为字符串</strong><br> toString()方法可见于数值、布尔值、对象和字符串值。null 和 undefined 值没有 toString()方法。</p><p>多数情况下，toString()不接收任何参数。不过，在对数值调用这个方法时，toString()可以接收一个底数参数，即以什么底数来输出数值的字符串表示。默认情况下，toString()返回数值的十进制字符串表示。而通过传入参数，可以得到数值的二进制、八进制、十六进制，或者其他任何有效基数的字符串表示，比如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;10&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;1010&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;12&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;10&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;a&quot; </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你不确定一个值是不是 null 或 undefined，可以使用 String()转型函数，它始终会返回表示相应类型值的字符串。String()函数遵循如下规则：</p><ul><li>如果值有 toString()方法，则调用该方法（不传参数）并返回结果。</li><li>如果值是 null，返回&quot;null&quot;。</li><li>如果值是 undefined，返回&quot;undefined&quot;。<br> 示例：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> value1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> value2 <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> value3 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> value4<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span>value1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;10&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span>value2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;true&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span>value3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;null&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span>value4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;undefined&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,21);function u(c,d){return t(),s("div",null,[p,a(" more "),i])}const f=n(o,[["render",u],["__file","data-type.html.vue"]]);export{f as default};
