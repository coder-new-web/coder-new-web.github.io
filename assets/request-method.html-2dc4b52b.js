import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as t,c as l,f as a}from"./app-af427ef1.js";const i={},r=a(`<h3 id="什么是http" tabindex="-1"><a class="header-anchor" href="#什么是http" aria-hidden="true">#</a> 什么是HTTP？</h3><p>HTTP，即超文本传输协议，是一种实现客户端和服务器之间通信的响应协议，它是用作客户端和服务器之间的请求。<br> 客户端（浏览器）会向服务器提交HTTP请求；然后服务器向客户端返回响应；其中响应包含有关请求的状态信息，还可能包含请求的内容。</p><h3 id="http常用方法" tabindex="-1"><a class="header-anchor" href="#http常用方法" aria-hidden="true">#</a> HTTP常用方法</h3><ol><li>GET方法</li></ol><p>介绍应用场景：GET方法用于使用给定的URI从给定服务器中检索信息，即从指定资源中请求数据。使用GET方法的请求应该只是检索数据，并且不应对数据产生其它影响。<br> 代码示例：</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code>http://localhost:3000/getlist?name=张三&amp;age=18
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>说明：GET请求是可以缓存的，我们可以从浏览器历史记录中查找到GET请求，还可以把它收藏到书签中；且GET请求有长度限制，仅用于请求数据而不对数据造成影响。<br> 注意事项：因为GET请求的不安全，在处理敏感数据时，最好不用GET请求。如果非得用，可以在前端进行数据加密、后端进行数据解密，但也因注意长度的限制。</p><ol start="2"><li>POST方法</li></ol><p>介绍与应用场景：POST方法用于将数据发送到服务器以创建或更新资源，它要求服务器确认请求中包含的内容作为URI区分Web资源的另一个下属。<br> 注意事项：POST请求永远不会被缓存，且对数据长度没有限制，也无法从浏览器历史记录中查找到POST请求。</p><ol start="3"><li>HEAD方法</li></ol><p>介绍与应用场景：HEAD方法与GET方法相同，但没有响应体，仅传输状态行和标题部分。这对于恢复相应头部编写的元数据非常有用，而无需传输整个内容。</p><ol start="4"><li>PUT方法</li></ol><p>介绍与应用场景：PUT方法用于将数据发送到服务器以创建或更新资源，它可以用上传内容替换目标资源中的所有当前内容。它会将包含元素放在所提供的URI下，如果URI指示的是当前资源，则会被改变。如果URI未指示当前资源，则服务器可以使用该URI创建资源。</p><ol start="5"><li>DELETE方法</li></ol><p>介绍与应用场景：DELETE方法用来删除指定的资源，它会删除URI给出的目标资源的所有当前内容。</p><ol start="6"><li>CONNECT方法</li></ol><p>介绍与应用场景：CONNECT方法用来建立到给定URI标识的服务器的隧道；它通过简单的TCP/IP隧道更改请求连接，通常是使用解码的HTTP代理来进行SSL编码的通信（HTTPS）。</p><ol start="7"><li>OPTIONS方法</li></ol><p>OPTIONS方法用来描述了目标资源的通信选项，会返回服务器支持预定义URI的HTTP策略。</p><ol start="8"><li>TRACE方法</li></ol><p>TRACE方法用来沿着目标资源的路径执行消息环回测试；它回应收到的请求，以便客户可以看到中间服务器进行了哪些（假设任何）进度或增量</p>`,21),o=[r];function s(T,p){return t(),l("div",null,o)}const c=e(i,[["render",s],["__file","request-method.html.vue"]]);export{c as default};
