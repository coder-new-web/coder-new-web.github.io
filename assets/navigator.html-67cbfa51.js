import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as t,c as s,a,b as e,f as l}from"./app-af427ef1.js";const i={},p=e("p",null,"navigator 是由 Netscape Navigator 2 最早引入浏览器的，现在已经成为客户端标识浏览器的标准。只要浏览器启用 JavaScript，navigator 对象就一定存在。但是与其他 BOM 对象一样，每个浏览器都支持自己的属性。",-1),o=l(`<p>navigator 对象实现了 NavigatorID 、 NavigatorLanguage 、 NavigatorOnLine 、NavigatorContentUtils 、 NavigatorStorage 、 NavigatorStorageUtils 、 NavigatorConcurrentHardware、NavigatorPlugins 和 NavigatorUserMedia 接口定义的属性和方法。<br> 这些接口定义的属性和方法：</p><table><thead><tr><th style="text-align:left;">属性/方法</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">activeVrDisplays</td><td style="text-align:left;">返回数组，包含 ispresenting 属性为 true 的 VRDisplay 实例</td></tr><tr><td style="text-align:left;">appCodeName</td><td style="text-align:left;">即使在非 Mozilla 浏览器中也会返回&quot;Mozilla&quot;</td></tr><tr><td style="text-align:left;">appName</td><td style="text-align:left;">浏览器全名</td></tr><tr><td style="text-align:left;">appVersion</td><td style="text-align:left;">浏览器版本。通常与实际的浏览器版本不一致</td></tr><tr><td style="text-align:left;">battery</td><td style="text-align:left;">返回暴露 Battery Status API 的 BatteryManager 对象</td></tr><tr><td style="text-align:left;">buildId</td><td style="text-align:left;">浏览器的构建编号</td></tr><tr><td style="text-align:left;">connection</td><td style="text-align:left;">返回暴露 Network Information API 的 NetworkInformation 对象</td></tr><tr><td style="text-align:left;">cookieEnabled</td><td style="text-align:left;">返回布尔值，表示是否启用了 cookie</td></tr><tr><td style="text-align:left;">credentials</td><td style="text-align:left;">返回暴露 Credentials Management API 的 CredentialsContainer 对象</td></tr><tr><td style="text-align:left;">deviceMemory</td><td style="text-align:left;">返回单位为 GB 的设备内存容量</td></tr><tr><td style="text-align:left;">doNotTrack</td><td style="text-align:left;">返回用户的“不跟踪”（do-not-track）设置</td></tr><tr><td style="text-align:left;">geolocation</td><td style="text-align:left;">返回暴露 Geolocation API 的 Geolocation 对象</td></tr><tr><td style="text-align:left;">getVRDisplays()</td><td style="text-align:left;">返回数组，包含可用的每个 VRDisplay 实例</td></tr><tr><td style="text-align:left;">getUserMedia()</td><td style="text-align:left;">返回与可用媒体设备硬件关联的流</td></tr><tr><td style="text-align:left;">hardwareConcurrency</td><td style="text-align:left;">返回设备的处理器核心数量</td></tr><tr><td style="text-align:left;">javaEnabled</td><td style="text-align:left;">返回布尔值，表示浏览器是否启用了 Java</td></tr><tr><td style="text-align:left;">language</td><td style="text-align:left;">返回浏览器的主语言</td></tr><tr><td style="text-align:left;">languages</td><td style="text-align:left;">返回浏览器偏好的语言数组</td></tr><tr><td style="text-align:left;">locks</td><td style="text-align:left;">返回暴露 Web Locks API 的 LockManager 对象</td></tr><tr><td style="text-align:left;">mediaCapabilities</td><td style="text-align:left;">返回暴露 Media Capabilities API 的 MediaCapabilities 对象</td></tr><tr><td style="text-align:left;">mediaDevices</td><td style="text-align:left;">返回可用的媒体设备</td></tr><tr><td style="text-align:left;">maxTouchPoints</td><td style="text-align:left;">返回设备触摸屏支持的最大触点数</td></tr><tr><td style="text-align:left;">mimeTypes</td><td style="text-align:left;">返回浏览器中注册的 MIME 类型数组</td></tr><tr><td style="text-align:left;">onLine</td><td style="text-align:left;">返回布尔值，表示浏览器是否联网</td></tr><tr><td style="text-align:left;">oscpu</td><td style="text-align:left;">返回浏览器运行设备的操作系统和（或）CPU</td></tr><tr><td style="text-align:left;">permissions</td><td style="text-align:left;">返回暴露 Permissions API 的 Permissions 对象</td></tr><tr><td style="text-align:left;">platform</td><td style="text-align:left;">返回浏览器运行的系统平台</td></tr><tr><td style="text-align:left;">plugins</td><td style="text-align:left;">返回浏览器安装的插件数组。在 IE 中，这个数组包含页面中所有<embed>元素</td></tr><tr><td style="text-align:left;">product</td><td style="text-align:left;">返回产品名称（通常是&quot;Gecko&quot;）</td></tr><tr><td style="text-align:left;">productSub</td><td style="text-align:left;">返回产品的额外信息（通常是 Gecko 的版本）</td></tr><tr><td style="text-align:left;">registerProtocolHandler()</td><td style="text-align:left;">将一个网站注册为特定协议的处理程序</td></tr><tr><td style="text-align:left;">requestMediaKeySystemAccess()</td><td style="text-align:left;">返回一个期约，解决为 MediaKeySystemAccess 对象</td></tr><tr><td style="text-align:left;">sendBeacon()</td><td style="text-align:left;">异步传输一些小数据</td></tr><tr><td style="text-align:left;">serviceWorker</td><td style="text-align:left;">返回用来与 ServiceWorker 实例交互的 ServiceWorkerContainer</td></tr><tr><td style="text-align:left;">share()</td><td style="text-align:left;">返回当前平台的原生共享机制</td></tr><tr><td style="text-align:left;">storage</td><td style="text-align:left;">返回暴露 Storage API 的 StorageManager 对象</td></tr><tr><td style="text-align:left;">userAgent</td><td style="text-align:left;">返回浏览器的用户代理字符串</td></tr><tr><td style="text-align:left;">vendor</td><td style="text-align:left;">返回浏览器的厂商名称</td></tr><tr><td style="text-align:left;">vendorSub</td><td style="text-align:left;">返回浏览器厂商的更多信息</td></tr><tr><td style="text-align:left;">vibrate()</td><td style="text-align:left;">触发设备振动</td></tr><tr><td style="text-align:left;">webdriver</td><td style="text-align:left;">返回浏览器当前是否被自动化程序控制</td></tr></tbody></table><p>navigator 对象的属性通常用于确定浏览器的类型。</p><h2 id="检测插件" tabindex="-1"><a class="header-anchor" href="#检测插件" aria-hidden="true">#</a> 检测插件</h2><p>检测浏览器是否安装了某个插件时开发中常见的需求。除IE10及更低版本外的浏览器，都可以通过plugins数组来确定。这个数组中的每一项都包含如下属性：</p><ul><li>name：插件名称</li><li>description：插件介绍</li><li>filename：插件的文件名</li><li>length：由当前插件处理的MINE类型数量</li></ul><p>通常，name属性包含识别插件所需的必要信息，尽管不是特别准确。检测插件就是遍历浏览器中可用的插件，并逐个比较插件名称，如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 插件检测，IE10 及更低版本无效</span>
<span class="token keyword">let</span> <span class="token function-variable function">hasPlugin</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  name <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> plugin <span class="token keyword">of</span> window<span class="token punctuation">.</span>navigator<span class="token punctuation">.</span>plugins<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>plugin<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 检测 Flash</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">hasPlugin</span><span class="token punctuation">(</span><span class="token string">&quot;Flash&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 检测 QuickTime</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">hasPlugin</span><span class="token punctuation">(</span><span class="token string">&quot;QuickTime&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个 hasPlugin()方法接收一个参数，即待检测插件的名称。第一步是把插件名称转换为小写形式，以便于比较。然后，遍历 plugins 数组，通过 indexOf()方法检测每个 name 属性，看传入的名称是不是存在于某个数组中。比较的字符串全部小写，可以避免大小写问题。传入的参数应该尽可能独一无二，以避免混淆。</p><p><strong>旧版本 IE 中的插件检测</strong><br> 在这些 IE中检测插件要使用专有的 ActiveXObject，并尝试实例化特定的插件。<br> IE 中的插件是实现为 COM 对象的，由唯一的字符串标识。因此，要检测某个插件就必须知道其 COM 标识符。如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 在旧版本 IE 中检测插件</span>
<span class="token keyword">function</span> <span class="token function">hasIEPlugin</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 检测 Flash</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">hasIEPlugin</span><span class="token punctuation">(</span><span class="token string">&quot;ShockwaveFlash.ShockwaveFlash&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 检测 QuickTime</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">hasIEPlugin</span><span class="token punctuation">(</span><span class="token string">&quot;QuickTime.QuickTime&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为检测插件涉及两种方式，所以一般要针对特定插件写一个函数，而不是使用通常的检测函数。比如下面的例子：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token comment">// 在所有浏览器中检测 Flash</span>
  <span class="token keyword">function</span> <span class="token function">hasFlash</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">hasPlugin</span><span class="token punctuation">(</span><span class="token string">&quot;Flash&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      result <span class="token operator">=</span> <span class="token function">hasIEPlugin</span><span class="token punctuation">(</span><span class="token string">&quot;ShockwaveFlash.ShockwaveFlash&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 在所有浏览器中检测 QuickTime</span>
  <span class="token keyword">function</span> <span class="token function">hasQuickTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">hasPlugin</span><span class="token punctuation">(</span><span class="token string">&quot;QuickTime&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      result <span class="token operator">=</span> <span class="token function">hasIEPlugin</span><span class="token punctuation">(</span><span class="token string">&quot;QuickTime.QuickTime&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 检测 Flash</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">hasFlash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 检测 QuickTime</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">hasQuickTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>plugins 有一个 refresh()方法，用于刷新 plugins 属性以反映新安装的插件。这个方法接收一个布尔值参数，表示刷新时是否重新加载页面。如果传入 true，则所有<br> 包含插件的页面都会重新加载。否则，只有 plugins 会更新，但页面不会重新加载。</p></div><h2 id="注册处理程序" tabindex="-1"><a class="header-anchor" href="#注册处理程序" aria-hidden="true">#</a> 注册处理程序</h2><p>现代浏览器支持 navigator 上的（在 HTML5 中定义的）registerProtocolHandler()方法。这个方法可以把一个网站注册为处理某种特定类型信息应用程序。</p><p>要使用 registerProtocolHandler()方法，必须传入 3 个参数：</p><ul><li>要处理的协议（如&quot;mailto&quot;或&quot;ftp&quot;）</li><li>处理该协议的 URL</li><li>应用名称<br> 比如，要把一个 Web 应用程序注册为默认邮件客户端，可以这样做：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>navigator<span class="token punctuation">.</span><span class="token function">registerProtocolHandler</span><span class="token punctuation">(</span><span class="token string">&quot;mailto&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;http://www.somemailclient.com?cmd=%s&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;Some Mail Client&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,19);function c(u,r){return t(),s("div",null,[p,a(" more "),o])}const g=n(i,[["render",c],["__file","navigator.html.vue"]]);export{g as default};
