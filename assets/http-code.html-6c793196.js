import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as e,c as h,f as r}from"./app-af427ef1.js";const d={},i=r('<h3 id="何为http状态码" tabindex="-1"><a class="header-anchor" href="#何为http状态码" aria-hidden="true">#</a> 何为HTTP状态码</h3><p>HTTP状态码由一个三位整数代码构成，用来只是是否已成功完成特定HTTP请求，表示HTTP响应状态的；代码的第一个数字定义了服务器响应的类型，后面的两个数字没有任何分类。</p><h3 id="http状态码类型" tabindex="-1"><a class="header-anchor" href="#http状态码类型" aria-hidden="true">#</a> HTTP状态码类型</h3><p>HTTP状态码一共可以分为五个类别，由状态码第一个数字来表示不同的类别：</p><h4 id="_1xx类-信息" tabindex="-1"><a class="header-anchor" href="#_1xx类-信息" aria-hidden="true">#</a> 1xx类：信息</h4><p>1xx类代码表示已收到请求并且流程正在继续。如果发送HTTP状态代码1xx，则服务器通知客户端请求正处于运动状态。此类组合了负责在请求期间向客户端传递信息的代码。</p><h4 id="_2xx类-成功" tabindex="-1"><a class="header-anchor" href="#_2xx类-成功" aria-hidden="true">#</a> 2xx类：成功</h4><p>2xx类代码表示客户端的请求已成功接收、运行。如果传输此代码，则意味着客户端的请求已被服务器接收，理解并被接受。它通常与期望的网站信息同时发送，并且用户通常仅注意它们请求的网站。</p><h4 id="_3xx类-重定向" tabindex="-1"><a class="header-anchor" href="#_3xx类-重定向" aria-hidden="true">#</a> 3xx类：重定向</h4><p>3xx类代码表示已收到服务器的请求，但为了确保成功处理请求，需要从客户端开始进一步的步骤。重定向和转发过程中都会出现3xx类状态码。</p><h4 id="_4xx类-客户端错误" tabindex="-1"><a class="header-anchor" href="#_4xx类-客户端错误" aria-hidden="true">#</a> 4xx类：客户端错误</h4><p>4xx类代码表示请求包含不正确的语法或无法满足请求，即存在客户端错误。服务器已收到请求，但无法执行。通过接收自动生成的HTML页面，互联网用户将会意识到这个错误。</p><h4 id="_5xx类-服务器错误" tabindex="-1"><a class="header-anchor" href="#_5xx类-服务器错误" aria-hidden="true">#</a> 5xx类：服务器错误</h4><p>5xx类代码表示请求在处理请求的过程中有错误或者异常状态等等的问题发生，导致服务器无法执行请求。这些服务器错误代码报告了当前无法执行请求或根本无法执行请求，这会导致出现HTML错误页面。</p><h3 id="http的十大状态码" tabindex="-1"><a class="header-anchor" href="#http的十大状态码" aria-hidden="true">#</a> HTTP的十大状态码</h3><h4 id="_200-好的" tabindex="-1"><a class="header-anchor" href="#_200-好的" aria-hidden="true">#</a> 200：好的</h4><p>表示请求已成功。成功的意义取决于HTTP方法：<br> GET方法：表示已获取资源并在消息正文中传输。<br> HEAD方法：表示实体标头位于邮件正文中。<br> PUT或POST方法：表示描述操作结果的资源在消息正文中传输。<br> TRACE方法：表示消息正文包含服务器收到的请求信息。</p><h4 id="_201-创建" tabindex="-1"><a class="header-anchor" href="#_201-创建" aria-hidden="true">#</a> 201：创建</h4><p>表示请求已成功，并且已创建新资源。这通常是在POST请求之后或在某些PUT请求之后发生的响应。</p><h4 id="_204-没有内容" tabindex="-1"><a class="header-anchor" href="#_204-没有内容" aria-hidden="true">#</a> 204：没有内容</h4><p>表示请求已经成功处理，但是没有返回任何内容主体。</p><h4 id="_304-未修改" tabindex="-1"><a class="header-anchor" href="#_304-未修改" aria-hidden="true">#</a> 304：未修改</h4><p>它告诉客户端响应未被修改，因此客户端可以继续使用相同的缓存版本的响应。</p><h4 id="_400-错误请求" tabindex="-1"><a class="header-anchor" href="#_400-错误请求" aria-hidden="true">#</a> 400：错误请求</h4><p>400是通用客户端错误状态，在没有其它4xx错误代码适用时使用。错误可能类似于格式错误的请求语法，无效的请求消息参数或欺骗性请求路由等。它代表由于语法无效，服务器无法理解请求。</p><h4 id="_401-未经授权" tabindex="-1"><a class="header-anchor" href="#_401-未经授权" aria-hidden="true">#</a> 401：未经授权</h4><p>401错误响应表示客户端尝试在受保护资源上运行而未提供适当的授权，它可能提供了错误的凭据或根本没有。从语义上讲，它意味着”未经身份验证“。也就是说，客户端必须对自身进行身份验证才能获得请求的响应。</p><h4 id="_403-禁止" tabindex="-1"><a class="header-anchor" href="#_403-禁止" aria-hidden="true">#</a> 403：禁止</h4><p>403错误响应表明客户端的请求是正确形成的，但REST API拒绝承认它，即用户的资源没人必要权限（未经授权），因此服务器拒绝提供适当的响应。与401不同，服务器知道客户端身份。</p><h4 id="_404-未找到" tabindex="-1"><a class="header-anchor" href="#_404-未找到" aria-hidden="true">#</a> 404：未找到</h4><p>服务器找不到请求的资源。在浏览器中，这意味着REST API无法将客户端的URI映射到资源，但可能在将来可用；也意味着可能端点有效但资源本身不存在了。</p><h4 id="_500-内部服务器错误" tabindex="-1"><a class="header-anchor" href="#_500-内部服务器错误" aria-hidden="true">#</a> 500：内部服务器错误</h4><p>500是通用REST API错误响应，是应用于意外服务器错误的收集状态代码。如果服务器部分发生错误（这会阻止检索请求的数据），将自动发出此HTTP状态代码。</p><h4 id="_504-网关超时" tabindex="-1"><a class="header-anchor" href="#_504-网关超时" aria-hidden="true">#</a> 504：网关超时</h4><p>当服务器充当网关并且无法及时获取响应时，会给出此错误响应。</p>',35),t=[i];function n(x,c){return e(),h("div",null,t)}const _=a(d,[["render",n],["__file","http-code.html.vue"]]);export{_ as default};
